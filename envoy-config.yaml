apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: demo
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              http_filters:
              - name: envoy.filters.http.jwt_authn
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                  providers:
                    local_provider:
                      # Remove issuer and audiences since your JWT doesn't have them
                      local_jwks:
                        inline_string: |
                          {
                            "keys": [{
                              "kty": "oct",
                              "alg": "HS256",
                              "k": "aWFtX2F1dGhfc2VjcmV0"
                            }]
                          }
                      from_headers:
                      - name: Authorization
                        value_prefix: "Bearer "
                      forward: true
                      payload_in_metadata: jwt_payload
                      clock_skew_seconds: 60
                  rules:
                  - match:
                      path: "/login"
                  - match:
                      path: "/ping"
                  - match:
                      prefix: "/"
                    requires:
                      provider_name: "local_provider"
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      -- Get JWT metadata
                      local meta = request_handle:streamInfo():dynamicMetadata()
                      local jwt_data = meta:get("envoy.filters.http.jwt_authn")
                      
                      if jwt_data and jwt_data["jwt_payload"] then
                        local payload = jwt_data["jwt_payload"]
                        
                        -- Check custom expiry field
                        local current_time = os.time()
                        local expiry = payload["expiry"]
                        if expiry and tonumber(expiry) < current_time then
                          request_handle:respond(
                            {[":status"] = "403", ["content-type"] = "application/json"},
                            '{"code": "TOKEN_EXPIRED", "message": "Access token expired, please refresh"}'
                          )
                          return
                        end
                        
                        -- Add custom headers
                        if payload["uid"] then
                          request_handle:headers():add("x-auth-uid", tostring(payload["uid"]))
                        end
                        if payload["device_id"] then
                          request_handle:headers():add("x-auth-deviceid", tostring(payload["device_id"]))
                        end
                        
                        -- Remove original uid and device_id headers if they exist
                        request_handle:headers():remove("uid")
                        request_handle:headers():remove("device_id")
                      end
                    end
                    
                    function envoy_on_response(response_handle)
                      -- Check if JWT filter returned 401 (invalid token)
                      local status = response_handle:headers():get(":status")
                      if status == "401" then
                        -- Check if this is a JWT validation failure
                        local www_auth = response_handle:headers():get("www-authenticate")
                        if www_auth and string.find(www_auth, "Bearer") then
                          response_handle:headers():replace(":status", "401")
                          response_handle:headers():replace("content-type", "application/json")
                          response_handle:headers():remove("www-authenticate")
                          response_handle:body():setBytes('{"code": "UNAUTHORIZED", "message": "Invalid token"}')
                        end
                      end
                    end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: api_service
      clusters:
      - name: api_service
        connect_timeout: 5s
        type: LOGICAL_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: api_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: api-server.demo.svc.cluster.local
                    port_value: 80